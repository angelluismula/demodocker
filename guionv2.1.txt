#Tareas preliminares: Crear cluster swarm y levantar el visualizer

# Instalar docker v1.13rc1, docker-compose, docker-machine y weave scope
curl -fsSL https://test.docker.com/ | sh
curl -L https://github.com/docker/machine/releases/download/v0.9.0-rc1/docker-machine-`uname -s`-`uname -m` >/usr/local/bin/docker-machine && \
chmod +x /usr/local/bin/docker-machine
curl -L https://github.com/docker/compose/releases/download/1.9.0-rc4/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose && \
chmod +x /usr/local/bin/docker-compose
sudo curl -L git.io/scope -o /usr/local/bin/scope
sudo chmod a+x /usr/local/bin/scope
scope launch

#Añadir 192.168.99.100:5000 al listado de registros inseguros
systemctl show --property=FragmentPath docker
#añadir en execstart  --insecure-registry 192.168.99.100:5000
sudo systemctl daemon-reload
service docker restart

#Arrancar scope

scope launch

#crear maquinas virtuales de swarm

docker-machine create -d virtualbox \
--engine-insecure-registry 192.168.99.100:5000 \
swmaster

docker-machine create -d virtualbox \
--engine-insecure-registry 192.168.99.100:5000 \
swnode1


docker-machine ssh swmaster docker swarm init --listen-addr $(docker-machine ip swmaster):2377 --advertise-addr $(docker-machine ip swmaster)
docker-machine ssh swnode1 docker swarm join --token $(docker-machine ssh swmaster docker swarm join-token -q worker) $(docker-machine ip swmaster):2377

eval $(docker-machine env swmaster)

docker run -it -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock manomarks/visualizer

#Paginas interesantes:

http://imagelayers.io
https://success.docker.com/Datacenter/Apply/Docker_Reference_Architecture%3A_Designing_Scalable,_Portable_Docker_Container_Networks
http://play-with-docker.com/


#Abrir el navegador 192.168.99.100:8080 para ver el visualizador

#Concepto dockerfile y docker-compose.
eval $(docker-machine env -u)

git clone https://github.com/angelluismula/demodocker

cd demodocker


#enseñar dockerfile y docker-compose.yml

export TAG=:v0.1
export REGISTRY=192.168.99.100:5000/

docker-compose up

#explicar que es lo que está haciendo y ver como crea las imagenes, las capas y los logs

#conectarse a localhost:8000 y enseñar la aplicacion (enseñar esquema del aplicativo)



docker-compose scale worker=5

docker-compose ps

#Comenzamos con swarm (explicar por encima y enseñar visualizer)

#Explicar registro e instalarlo como servicio

eval $(docker-machine env swmaster)
docker service create --name registry --publish 5000:5000 registry:2



#imagenes y volverlas a taguear. Concepto registro

# mv docker-compose.yml docker-compose.yml-original
# mv docker-compose.yml-images docker-compose.yml

export TAG=:v0.1
export REGISTRY=192.168.99.100:5000/export REGISTRY=192.168.99.100:5000/

docker-compose build
docker-compose push


#concepto servicio y escalado

docker service create --replicas 1 --name web --publish 8080:80 nginx:latest

#abrir http://192.168.99.100:8080

docker service ls
docker service inspect --pretty web
docker service ps web

docker service scale web=4


#Concepto red y monitorización (modo global y logging driver)

docker network create monitoring -d overlay

docker service create --network=monitoring \
--mount type=volume,target=/usr/share/elasticsearch/data \
--constraint node.hostname==swmaster --name elasticsearch elasticsearch:2.4.0

docker service create --network=monitoring \
--name kibana -e ELASTICSEARCH_URL="http://elasticsearch:9200"\
 -p 5601:5601 kibana:4.6.0


docker service create --network=monitoring --mode global --name cadvisor \
--publish=9080:8080 \
--mount type=bind,source=/,target=/rootfs,readonly=true \
--mount type=bind,source=/var/run,target=/var/run,readonly=false \
--mount type=bind,source=/var/lib/docker/,target=/var/lib/docker,readonly=true \
google/cadvisor:latest \
-storage_driver=elasticsearch \
-storage_driver_es_host="http://elasticsearch:9200"


#Hay que cargar en kibana  (kibana.json) la vista de ejemplo en settings --> objects --> import


#concepto modo global (levantar una maquina nueva con docker-machine)

docker-machine create -d virtualbox \
--engine-insecure-registry 192.168.99.100:5000 \
swnode2

docker-machine ssh swnode2 docker swarm join --token $(docker-machine ssh swmaster docker swarm join-token -q worker) $(docker-machine ip swmaster):2377

#concepto actualizaciones de servicio (explicar opciones)
docker-compose
docker service update --image almula/holababel web

#concepto selfhealing (contralado / caida y recuperación)

docker node update --availability drain swnode1

docker node update --availability active swnode1
docker service scale web=10

#Concepto routing mesh y update (navegar a nodos que no tengan ese contenedor)

docker service scale web=1
curl http://192.168.99.101:8080
curl http://192.168.99.100:8080
curl http://192.168.99.102:8080

#Montando el proyecto babelcoins

export REGISTRY=192.168.99.100:5000

docker network create back -d overlay
docker network create front -d overlay

docker service create --network front --network back \
--name redis redis

docker service create --network back \
--name rng \ $REGISTRY/demodocker_rng:v0.1

docker service create --network back \
--name worker \ $REGISTRY/demodocker_worker:v0.1

docker service create --network front \
--name webui \ $REGISTRY/demodocker_webui:v0.1

docker network inspect front
docker network inspect back

# O hacerlo todo en una unica acción:

docker deploy demodocker

#Monitorización

docker service create --network monitoring --name logstash -p 12201:12201/udp \
logstash:2.4 -e "$(cat logstash.conf)"

docker service update web \
--log-driver gelf --log-opt gelf-address=udp://127.0.0.1:12201
