#Tareas preliminares: Crear cluster swarm y levantar el visualizer

#Paginas interesantes:

http://imagelayers.io
https://success.docker.com/Datacenter/Apply/Docker_Reference_Architecture%3A_Designing_Scalable,_Portable_Docker_Container_Networks


#Añadir 192.168.99.100:5000 al listado de registros inseguros
#Instalar docker experimental (tiene soporte de bundle)

docker-machine create -d virtualbox \
--virtualbox-boot2docker-url="https://github.com/boot2docker/boot2docker/releases/download/v1.12.3/boot2docker-experimental.iso" \
--engine-insecure-registry 192.168.99.100:5000 \
swmaster


docker-machine create -d virtualbox \
 --virtualbox-boot2docker-url="https://github.com/boot2docker/boot2docker/releases/download/v1.12.3/boot2docker-experimental.iso" \
 --engine-insecure-registry 192.168.99.100:5000 \
swnode1

docker $(docker-machine config swmaster) swarm init --listen-addr $(docker-machine ip swmaster):2377 --advertise-addr $(docker-machine ip swmaster)
docker $(docker-machine config swnode1) swarm join --token $(docker $(docker-machine config swmaster) swarm join-token -q worker) $(docker-machine ip swmaster):2377

eval $(docker-machine env swmaster)

docker run -it -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock manomarks/visualizer

#Abrir el navegador 192.168.99.100:8080 para ver el visualizador

#Concepto dockerfile y docker-compose.
eval $(docker-machine env -u)

git clone https://github.com/angelluismula/demodocker

cd demodocker

#enseñar dockerfile y docker-compose.yml

docker-compose up

#explicar que es lo que está haciendo y ver como crea las imagenes, las capas y los logs

#conectarse a localhost:8000 y enseñar la aplicacion (enseñar esquema del aplicativo)

docker-compose scale worker=5

docker-compose ps

#Comenzamos con swarm (explicar por encima y enseñar visualizer)

#Explicar registro e instalarlo como servicio

eval $(docker-machine env swmaster)
docker service create --name registry --publish 5000:5000 registry:2



#imagenes y volverlas a taguear. Concepto registro

mv docker-compose.yml docker-compose.yml-original
mv docker-compose.yml-images docker-compose.yml
export COLON_TAG=:v0.1
export REGISTRY_SLASH=192.168.99.100:5000/
docker-compose build
docker-compose bundle --push-images



#concepto servicio y escalado

docker service create --replicas 1 --name web --publish 8080:80 nginx:latest

docker service ls
docker service inspect --pretty web
docker service ps web

docker service scale web=4


#Concepto red de servicios y monitorización

docker network create monitoring -d overlay

docker service create --network=monitoring --mount type=volume,target=/usr/share/elasticsearch/data --constraint node.hostname==swmaster --name elasticsearch elasticsearch:2.4.0

docker service create --network=monitoring --name kibana -e ELASTICSEARCH_URL="http://elasticsearch:9200" -p 5601:5601 kibana:4.6.0


docker service create --network=monitoring --mode global --name cadvisor --publish=9080:8080 \
  --mount type=bind,source=/,target=/rootfs,readonly=true \
  --mount type=bind,source=/var/run,target=/var/run,readonly=false \
  --mount type=bind,source=/sys,target=/http://collabnix.com/archives/2001sys,readonly=true \
  --mount type=bind,source=/var/lib/docker/,target=/var/lib/docker,readonly=true \
  google/cadvisor:latest \
  -storage_driver=elasticsearch \
  -storage_driver_es_host="http://elasticsearch:9200"


docker service create --name curl --network=monitoring --restart-condition none alpine-curl curl -XPUT http://elasticsearch:9200/.kibana/index-pattern/cadvisor -d '{"title" : "cadvisor*",  "timeFieldName": "container_stats.timestamp"}'


#Hay que cargar en kibana  (kibana.json) la vista de ejemplo en settings --> objects --> import


#concepto modo global

docker-machine create -d virtualbox \
--virtualbox-boot2docker-url="https://github.com/boot2docker/boot2docker/releases/download/v1.12.3/boot2docker-experimental.iso" \
--engine-insecure-registry 192.168.99.100:5000 \
swnode2

docker $(docker-machine config swnode2) swarm join --token $(docker $(docker-machine config swmaster) swarm join-token -q worker) $(docker-machine ip swmaster):2377

#concepto actualizaciones de servicio (explicar opciones)

docker service update --image almula/holababel web2

#concepto sacar un nodo (selfhealing)
docker node update --availability drain swnode1


#Concepto routing mesh (navegar a nodos que no tengan ese contenedor)



docker node update --availability active swnode1

curl http://192.168.99.101:8080



TODO:
nfs: http://collabnix.com/archives/2001
Aprovechar recursos de https://lostechies.com/gabrielschenker/2016/10/05/docker-and-swarm-mode-part-3/
